import math
import random
import tkinter as tk
import time
import sys
import os
from extra_bits import *
class Operations():
  """Handles all the basic mathematical operations"""
  def addition():
    window3 = tk.Tk()
    window3.title("Addition")
    window3.geometry("362x256")
    icon = tk.PhotoImage(file = "image.png")
    # window3.iconphoto(False, icon)
    field = tk.Text(window3, height = 2, width = 21, font = ("Times New Roman", 20))
    field.grid(row = 1, column = 1, columnspan = 4)
    btn_1 = tk.Button(window3, text = "1", command = lambda: add_to_field(1, field), width = 5, font = ("Times New Roman", 14))
    btn_1.grid(row = 4, column = 1)
    btn_2 = tk.Button(window3, text = "2", command = lambda: add_to_field(2, field), width = 5, font = ("Times New Roman", 14))
    btn_2.grid(row = 4, column = 2)
    btn_3 = tk.Button(window3, text = "3", command = lambda: add_to_field(3, field), width = 5, font = ("Times New Roman", 14))
    btn_3.grid(row = 4, column = 3)
    btn_4 = tk.Button(window3, text = "4", command = lambda: add_to_field(4, field), width = 5, font = ("Times New Roman", 14))
    btn_4.grid(row = 3, column = 1)
    btn_5 = tk.Button(window3, text = "5", command = lambda: add_to_field(5, field), width = 5, font = ("Times New Roman", 14))
    btn_5.grid(row = 3, column = 2)
    btn_6 = tk.Button(window3, text = "6", command = lambda: add_to_field(6, field), width = 5, font = ("Times New Roman", 14))
    btn_6.grid(row = 3, column = 3)
    btn_7 = tk.Button(window3, text = "7", command = lambda: add_to_field(7, field), width = 5, font = ("Times New Roman", 14))
    btn_7.grid(row = 2, column = 1)
    btn_8 = tk.Button(window3, text = "8", command = lambda: add_to_field(8, field), width = 5, font = ("Times New Roman", 14))
    btn_8.grid(row = 2, column = 2)
    btn_9 = tk.Button(window3, text = "9", command = lambda: add_to_field(9, field), width = 5, font = ("Times New Roman", 14))
    btn_9.grid(row = 2, column = 3)
    btn_0 = tk.Button(window3, text = "0", command = lambda: add_to_field(0, field), width = 5, font = ("Times New Roman", 14))
    btn_0.grid(row = 5, column = 1)
    btn_plus = tk.Button(window3, text = "+", command = lambda: add_to_field("+", field), width = 5, font = ("Times New Roman", 14))
    btn_plus.grid(row = 3, column = 4)
    btn_equal = tk.Button(window3, text = "=", command = lambda: calculate(field), width = 5, font = ("Times New Roman", 14))
    btn_equal.grid(row = 2, column = 4)
    btn_clear = tk.Button(window3, text = "Clear", command = lambda: clear(field), width = 5, font = ("Times New Roman", 14))
    btn_clear.grid(row = 4, column = 4)
    return
  def subtraction():
    """Subtracts."""
    window4 = tk.Tk()
    window4.title("Subtraction")
    window4.geometry("362x256")
    icon = tk.PhotoImage(file = "image.png")
    # window3.iconphoto(False, icon)
    field = tk.Text(window4, height = 2, width = 21, font = ("Times New Roman", 20))
    field.grid(row = 1, column = 1, columnspan = 4)
    btn_1 = tk.Button(window4, text = "1", command = lambda: add_to_field(1, field), width = 5, font = ("Times New Roman", 14))
    btn_1.grid(row = 4, column = 1)
    btn_2 = tk.Button(window4, text = "2", command = lambda: add_to_field(2, field), width = 5, font = ("Times New Roman", 14))
    btn_2.grid(row = 4, column = 2)
    btn_3 = tk.Button(window4, text = "3", command = lambda: add_to_field(3, field), width = 5, font = ("Times New Roman", 14))
    btn_3.grid(row = 4, column = 3)
    btn_4 = tk.Button(window4, text = "4", command = lambda: add_to_field(4, field), width = 5, font = ("Times New Roman", 14))
    btn_4.grid(row = 3, column = 1)
    btn_5 = tk.Button(window4, text = "5", command = lambda: add_to_field(5, field), width = 5, font = ("Times New Roman", 14))
    btn_5.grid(row = 3, column = 2)
    btn_6 = tk.Button(window4, text = "6", command = lambda: add_to_field(6, field), width = 5, font = ("Times New Roman", 14))
    btn_6.grid(row = 3, column = 3)
    btn_7 = tk.Button(window4, text = "7", command = lambda: add_to_field(7, field), width = 5, font = ("Times New Roman", 14))
    btn_7.grid(row = 2, column = 1)
    btn_8 = tk.Button(window4, text = "8", command = lambda: add_to_field(8, field), width = 5, font = ("Times New Roman", 14))
    btn_8.grid(row = 2, column = 2)
    btn_9 = tk.Button(window4, text = "9", command = lambda: add_to_field(9, field), width = 5, font = ("Times New Roman", 14))
    btn_9.grid(row = 2, column = 3)
    btn_0 = tk.Button(window4, text = "0", command = lambda: add_to_field(0, field), width = 5, font = ("Times New Roman", 14))
    btn_0.grid(row = 5, column = 1)
    btn_minus = tk.Button(window4, text = "-", command = lambda: add_to_field("-", field), width = 5, font = ("Times New Roman", 14))
    btn_minus.grid(row = 3, column = 4)
    btn_equal = tk.Button(window4, text = "=", command = lambda: calculate(field), width = 5, font = ("Times New Roman", 14))
    btn_equal.grid(row = 2, column = 4)
    btn_clear = tk.Button(window4, text = "Clear", command = lambda: clear(field), width = 5, font = ("Times New Roman", 14))
    btn_clear.grid(row = 4, column = 4)
    return
  def multiplication():
    """Multiplies."""
    window4 = tk.Tk()
    window4.title("Multiplication")
    window4.geometry("362x256")
    icon = tk.PhotoImage(file = "image.png")
    # window3.iconphoto(False, icon)
    field = tk.Text(window4, height = 2, width = 21, font = ("Times New Roman", 20))
    field.grid(row = 1, column = 1, columnspan = 4)
    btn_1 = tk.Button(window4, text = "1", command = lambda: add_to_field(1, field), width = 5, font = ("Times New Roman", 14))
    btn_1.grid(row = 4, column = 1)
    btn_2 = tk.Button(window4, text = "2", command = lambda: add_to_field(2, field), width = 5, font = ("Times New Roman", 14))
    btn_2.grid(row = 4, column = 2)
    btn_3 = tk.Button(window4, text = "3", command = lambda: add_to_field(3, field), width = 5, font = ("Times New Roman", 14))
    btn_3.grid(row = 4, column = 3)
    btn_4 = tk.Button(window4, text = "4", command = lambda: add_to_field(4, field), width = 5, font = ("Times New Roman", 14))
    btn_4.grid(row = 3, column = 1)
    btn_5 = tk.Button(window4, text = "5", command = lambda: add_to_field(5, field), width = 5, font = ("Times New Roman", 14))
    btn_5.grid(row = 3, column = 2)
    btn_6 = tk.Button(window4, text = "6", command = lambda: add_to_field(6, field), width = 5, font = ("Times New Roman", 14))
    btn_6.grid(row = 3, column = 3)
    btn_7 = tk.Button(window4, text = "7", command = lambda: add_to_field(7, field), width = 5, font = ("Times New Roman", 14))
    btn_7.grid(row = 2, column = 1)
    btn_8 = tk.Button(window4, text = "8", command = lambda: add_to_field(8, field), width = 5, font = ("Times New Roman", 14))
    btn_8.grid(row = 2, column = 2)
    btn_9 = tk.Button(window4, text = "9", command = lambda: add_to_field(9, field), width = 5, font = ("Times New Roman", 14))
    btn_9.grid(row = 2, column = 3)
    btn_0 = tk.Button(window4, text = "0", command = lambda: add_to_field(0, field), width = 5, font = ("Times New Roman", 14))
    btn_0.grid(row = 5, column = 1)
    btn_x = tk.Button(window4, text = "X", command = lambda: add_to_field("*", field), width = 5, font = ("Times New Roman", 14))
    btn_x.grid(row = 3, column = 4)
    btn_equal = tk.Button(window4, text = "=", command = lambda: calculate(field), width = 5, font = ("Times New Roman", 14))
    btn_equal.grid(row = 2, column = 4)
    btn_clear = tk.Button(window4, text = "Clear", command = lambda: clear(field), width = 5, font = ("Times New Roman", 14))
    btn_clear.grid(row = 4, column = 4)
    return
  def division():
    """Divides."""
    window4 = tk.Tk()
    window4.title("Division")
    window4.geometry("362x256")
    icon = tk.PhotoImage(file = "image.png")
    # window3.iconphoto(False, icon)
    field = tk.Text(window4, height = 2, width = 21, font = ("Times New Roman", 20))
    field.grid(row = 1, column = 1, columnspan = 4)
    btn_1 = tk.Button(window4, text = "1", command = lambda: add_to_field(1, field), width = 5, font = ("Times New Roman", 14))
    btn_1.grid(row = 4, column = 1)
    btn_2 = tk.Button(window4, text = "2", command = lambda: add_to_field(2, field), width = 5, font = ("Times New Roman", 14))
    btn_2.grid(row = 4, column = 2)
    btn_3 = tk.Button(window4, text = "3", command = lambda: add_to_field(3, field), width = 5, font = ("Times New Roman", 14))
    btn_3.grid(row = 4, column = 3)
    btn_4 = tk.Button(window4, text = "4", command = lambda: add_to_field(4, field), width = 5, font = ("Times New Roman", 14))
    btn_4.grid(row = 3, column = 1)
    btn_5 = tk.Button(window4, text = "5", command = lambda: add_to_field(5, field), width = 5, font = ("Times New Roman", 14))
    btn_5.grid(row = 3, column = 2)
    btn_6 = tk.Button(window4, text = "6", command = lambda: add_to_field(6, field), width = 5, font = ("Times New Roman", 14))
    btn_6.grid(row = 3, column = 3)
    btn_7 = tk.Button(window4, text = "7", command = lambda: add_to_field(7, field), width = 5, font = ("Times New Roman", 14))
    btn_7.grid(row = 2, column = 1)
    btn_8 = tk.Button(window4, text = "8", command = lambda: add_to_field(8, field), width = 5, font = ("Times New Roman", 14))
    btn_8.grid(row = 2, column = 2)
    btn_9 = tk.Button(window4, text = "9", command = lambda: add_to_field(9, field), width = 5, font = ("Times New Roman", 14))
    btn_9.grid(row = 2, column = 3)
    btn_0 = tk.Button(window4, text = "0", command = lambda: add_to_field(0, field), width = 5, font = ("Times New Roman", 14))
    btn_0.grid(row = 5, column = 1)
    btn_divide = tk.Button(window4, text = "/", command = lambda: add_to_field("/", field), width = 5, font = ("Times New Roman", 14))
    btn_divide.grid(row = 3, column = 4)
    btn_equal = tk.Button(window4, text = "=", command = lambda: calculate(field), width = 5, font = ("Times New Roman", 14))
    btn_equal.grid(row = 2, column = 4)
    btn_clear = tk.Button(window4, text = "Clear", command = lambda: clear(field), width = 5, font = ("Times New Roman", 14))
    btn_clear.grid(row = 4, column = 4)
    return
class Solvers():
  """Built in solvers that follow formulas to get answers."""
  
  def SAORPS():
    window14 = tk.Tk()
    window14.title("Surface Area Of Rectangular Prism Solver")
    window14.geometry("452x200")
    label = tk.Label(window14, text = "What is the width?: ")
    entry1 = tk.Entry(window14)
    label2 = tk.Label(window14, text = "What is the length?: ")
    entry2 = tk.Entry(window14)
    label3 = tk.Label(window14, text = "What is the height")
    entry3 = tk.Entry(window14)
    label.pack()
    entry1.pack()
    label2.pack()
    entry2.pack()
    label3.pack()
    entry3.pack()
    def save_input():
        w = entry1.get()
        l = entry2.get()
        h = entry3.get()
        w, l, h = int(w), int(l), int(h)
        answer = 2*((w*l)+(h*l)+(h*w))
        label4 = tk.Label(window14, text = "The answer is: " + str(answer))
        label4.pack()
    button = tk.Button(window14, text = "Solve", command = lambda:       save_input())
    button.pack()
    window14.mainloop()
  def SAOC():
    window14 = tk.Tk()
    window14.title("SAOC")
    window14.geometry("452x200")
    label = tk.Label(window14, text = "What is the measure of one edge?: ")
    entry1 = tk.Entry(window14)
    label.pack()
    entry1.pack()
    def save_input():
        e = entry1.get()
        e = int(e)
        answer = e**2 * 6
        label4 = tk.Label(window14, text = "The answer is: " + str(answer))
        label4.pack()
    button = tk.Button(window14, text = "Solve", command = lambda:       save_input())
    button.pack()
    window14.mainloop()

  def RPVS():
    window8 = tk.Tk()
    window8.title("Rectangular Prism Volume Solver")
    window8.geometry("452x200")
    label = tk.Label(window8, text = "What is the width?: ")
    entry1 = tk.Entry(window8)
    label2 = tk.Label(window8, text = "What is the length?: ")
    entry2 = tk.Entry(window8)
    label3 = tk.Label(window8, text = "What is the height?: ")
    entry3 = tk.Entry(window8)
    label.pack()
    entry1.pack()
    label2.pack()
    entry2.pack()
    label3.pack()
    entry3.pack()
    def save_input():
      w = entry1.get()
      l = entry2.get()
      h = entry3.get()
      answer = int(l) * int(w) * int(h)
      label5 = tk.Label(window8, text = "The answer is: " + str(answer))
      label5.pack()
    button = tk.Button(window8, text = "Solve", command = lambda: save_input())
    button.pack()
    window8.mainloop()
  def TPVS():
    window9 = tk.Tk()
    window9.title("Triangular Prism Volume Solver")
    window9.geometry("452x200")
    label = tk.Label(window9, text = "What is the length of side 1?: ")
    entry1 = tk.Entry(window9)
    label2 = tk.Label(window9, text = "What is the length of side 2?: ")
    entry2 = tk.Entry(window9)
    label3 = tk.Label(window9, text = "What is the length of side 3?: ")
    entry3 = tk.Entry(window9)
    label4 = tk.Label(window9, text = "What is the height?: ")
    entry4 = tk.Entry(window9)
    label.pack()
    entry1.pack()
    label2.pack()
    entry2.pack()
    label3.pack()
    entry3.pack()
    label4.pack()
    entry4.pack()
    def save_input():
      a = entry1.get()
      b = entry2.get()
      c = entry3.get()
      h = entry4.get()
      a, b, c, h = int(a), int(b), int(c), int(h)
      answer = (1/4 * h) * math.sqrt((-a**4)+2*((a*b)**2)+2*((a*c)**2)-(b**4)+2*((b*c)**2)-(c**4))
      label5 = tk.Label(window9, text = "The answer is: " +     str(answer))
      label5.pack()
    button = tk.Button(window9, text = "Solve", command = lambda: save_input())
    button.pack()
    window9.mainloop()
  def CVS():
    window10 = tk.Tk()
    window10.title("Cube Volume Solver")
    window10.geometry("452x100")
    label = tk.Label(window10, text = "What is the length of side 1?: ")
    entry1 = tk.Entry(window10)

    label.pack()
    entry1.pack()
    def save_input():
      a = entry1.get()
      a = int(a)
      answer = a**3
      label2 = tk.Label(window10, text = "The answer is: " + str(answer))
      label2.pack()
    button = tk.Button(window10, text = "Solve", command = lambda:     save_input())
    button.pack()
    window10.mainloop()
  def PVS():
    window11 = tk.Tk()
    window11.title("Pyramid Volume Solver")
    window11.geometry("452x200")
    label = tk.Label(window11, text = "What is the width?: ")
    entry1 = tk.Entry(window11)
    label2 = tk.Label(window11, text = "What is the length?: ")
    entry2 = tk.Entry(window11)
    label3 = tk.Label(window11, text = "What is the height?: ")
    entry3 = tk.Entry(window11)
    label.pack()
    entry1.pack()
    label2.pack()
    entry2.pack()
    label3.pack()
    entry3.pack()
    def save_input():
        w = entry1.get()
        l = entry2.get()
        h = entry3.get()
        w, l, h = int(w), int(l), int(h)
        answer = (l*w*h)/3
        label4 = tk.Label(window11, text = "The answer is: " + str(answer))
        label4.pack()
    button = tk.Button(window11, text = "Solve", command = lambda:       save_input())
    button.pack()
    window11.mainloop()
  def CVS0():
    window13 = tk.Tk()
    window13.title("Cylinder Volume Solver")
    window13.geometry("452x200")
    label = tk.Label(window13, text = "What is the width?: ")
    entry1 = tk.Entry(window13)
    label2 = tk.Label(window13, text = "What is the length?: ")
    entry2 = tk.Entry(window13)
    label.pack()
    entry1.pack()
    label2.pack()
    entry2.pack()
    def save_input():
        r = entry1.get()
        h = entry2.get()
        r, h = int(r), int(h)
        answer = math.pi*(r**2)*h
        label4 = tk.Label(window13, text = "The answer is: " + str(answer))
        label4.pack()
    button = tk.Button(window13, text = "Solve", command = lambda:       save_input())
    button.pack()
    window13.mainloop()
  def CVS_():
    window12 = tk.Tk()
    window12.title("Cone Volume Solver")
    window12.geometry("452x200")
    label = tk.Label(window12, text = "What is the width?: ")
    entry1 = tk.Entry(window12)
    label2 = tk.Label(window12, text = "What is the length?: ")
    entry2 = tk.Entry(window12)
    label.pack()
    entry1.pack()
    label2.pack()
    entry2.pack()
    def save_input():
        r = entry1.get()
        h = entry2.get()
        r, h = int(r), int(h)
        answer = math.pi*(r**2)*(h/3)
        label4 = tk.Label(window12, text = "The answer is: " + str(answer))
        label4.pack()
    button = tk.Button(window12, text = "Solve", command = lambda:       save_input())
    button.pack()
    window12.mainloop()
    return
  def quadratics():
    """Solvers for quadratic equations."""
    a = float(input("a: "))
    b = float(input("b: "))
    c = float(input("c: "))
    sqrt = sqrt(b**2-4*a*c)
    x1 = (-b+sqrt)/(2*a)
    x2 = (-b-sqrt)/(2*a)
    print(f"x = {x1}")
    print(f"x = {x2}")


  def AOSS():
    a = float(input("What is the length of one side?: "))
    v = a**2
    print(v)
  def ARS():
    l = float(input("What is the length?: "))
    w = float(input("What is the length:? "))
    v = l*w
    print(v)
    return
  def perimeter():
    """Solvers for perimeter."""
    
    return
def solvers():
  window5 = tk.Tk()
  window5.title("Solvers")
  window5.geometry("295x37")
  icon = tk.PhotoImage(file = "image.png")
  btn_surface_area = tk.Button(window5, text = "Surface Area", command = lambda: surface_area(), width = 10, font = ("Times New Roman", 14))
  btn_surface_area.grid(row = 1, column = 1)
  btn_volume = tk.Button(window5, text = "Volume", command = lambda: volume(), width = 10, font = ("Times New Roman", 14))
  btn_volume.grid(row = 1, column = 2)
def surface_area():
  window6 = tk.Tk()
  window6.title("Surface Area")
  window6.geometry("392x37")
  icon = tk.PhotoImage(file = "image.png")
  btn_SAORPS = tk.Button(window6, text = "Rectangular Prism", command = lambda: Solvers.SAORPS(), width = 14, font = ("Times New Roman", 14))
  btn_SAORPS.grid(row = 1, column = 1)
  btn_SAOC = tk.Button(window6, text = "Cube", command = lambda: Solvers.SAOC(), width = 14, font = ("Times New Roman", 14))
  btn_SAOC.grid(row = 1, column = 2)
def volume():
  window7 = tk.Tk()
  window7.title("Volume")
  window7.geometry("392x111")
  icon = tk.PhotoImage(file="image.png")
  btn_RPVS = tk.Button(window7, text = "Rectangular Prism", command = lambda: Solvers.RPVS(), width = 14, font = ("Times New Roman", 14))
  btn_RPVS.grid(row = 1, column = 1)
  btn_TPVS = tk.Button(window7, text = "Triangular Prism", command = lambda: Solvers.TPVS(), width = 14, font = ("Times New Roman", 14))
  btn_TPVS.grid(row = 1, column = 2)
  btn_CVS = tk.Button(window7, text = "Cube", command = lambda: Solvers.CVS(), width = 14, font = ("Times New Roman", 14))
  btn_CVS.grid(row = 2, column = 1)
  btn_PVS = tk.Button(window7, text = "Pyramid", command = lambda: Solvers.PVS(), width = 14, font = ("Times New Roman", 14))
  btn_PVS.grid(row = 2, column = 2)
  btn_CVS0 = tk.Button(window7, text = "Cylinder", command = lambda: Solvers.CVS0(), width = 14, font = ("Times New Roman", 14))
  btn_CVS0.grid(row = 3, column = 1)
  btn_CVS_ = tk.Button(window7, text = "Cone", command = lambda: Solvers.CVS_(), width = 14, font = ("Times New Roman", 14))
  btn_CVS_.grid(row = 3, column = 2)
def start():
  window.destroy()
  window2 = tk.Tk()
  window2.title("Menu")
  window2.geometry("452x37")
  icon = tk.PhotoImage(file = "image.png")
  window2.iconphoto(False, icon)
  btn_a = tk.Button(window2, text = "Add", command = lambda: Operations.addition(), width = 4, font = ("Times New Roman", 14))
  btn_a.grid(row = 2, column = 1)
  btn_s = tk.Button(window2, text = "Subtract", command = lambda: Operations.subtraction(), width = 6, font = ("Times New Roman", 14))
  btn_s.grid(row = 2, column = 2)
  btn_m = tk.Button(window2, text = "Multiply", command = lambda: Operations.multiplication(), width = 6, font = ("Times New Roman", 14))
  btn_m.grid(row = 2, column = 3)
  btn_d = tk.Button(window2, text = "Divide", command = lambda: Operations.division(), width = 5, font = ("Times New Roman", 14))
  btn_d.grid(row = 2, column = 4)
  btn_b = tk.Button(window2, text = "Solvers", command = lambda: solvers(), width = 5, font = ("Times New Roman", 14))
  btn_b.grid(row = 2, column = 5)
  window2.mainloop()
window = tk.Tk()
window.title("Main Menu")
window.geometry("174x37")
icon = tk.PhotoImage(file = "image.png")
window.iconphoto(False, icon)
btn_1= tk.Button(window, text = "Start", command = lambda: start(), width=5, font=("Times New Roman", 14))
btn_1.grid(row = 2, column = 1)
btn_2= tk.Button(window, text="Exit", command = lambda: sys.exit(), width=5, font=("Times New Roman", 14))
btn_2.grid(row= 2, column = 2)
window.mainloop()